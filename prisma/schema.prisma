generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  signupMethod  String        @default("manual")
  isActive      Boolean       @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  savedData     SavedData[]
  searches      Search[]
  scrapedData   ScrapedData[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Search {
  id        String   @id @default(cuid())
  userId    String
  platform  String
  category  String?
  keyword   String
  results   String   // JSON string of scraped results
  status    String   @default("completed")
  resultCount Int?   @default(0)
  enabledOCR Boolean @default(true)
  language  String  @default("en")
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  scrapedData ScrapedData[]
}

model ScrapedData {
  id             String   @id @default(cuid())
  searchId       String
  userId         String
  title          String
  description    String?
  platform       String
  category       String?
  keyword        String
  url            String?
  imageUrl       String?
  raised         String?
  goal           String?
  backers        String?
  daysLeft       String?
  startDate      String?
  endDate        String?
  originalData   String   // Original scraped data JSON
  ocrData        String?  // OCR enhanced data JSON
  nlpData        String?  // NLP processed data JSON
  isRelevant     Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  search         Search   @relation(fields: [searchId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  savedData      SavedData?
}

model SavedData {
  id             String       @id @default(cuid())
  userId         String
  scrapedDataId  String       @unique
  title          String
  platform       String
  data           String       // JSON string of the saved data
  spreadsheetUrl String?
  exportedAt     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  scrapedData    ScrapedData  @relation(fields: [scrapedDataId], references: [id], onDelete: Cascade)
}
